import os
import re
import asyncio
from logger import logger
from dotenv import load_dotenv
from collections import defaultdict
from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage

from aiogram import types
from utils import gigachat_call, get_temp, UserData

from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

load_dotenv()

bot = Bot(token=os.environ.get("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())


async def set_commands():
    commands = [
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand(command="/set_profile", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="/profile", description="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="/log_water", description="–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥—É. –ü—Ä–∏–º–µ—Ä: /log_water 500"),
        BotCommand(command="/log_food", description="–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É. –ü—Ä–∏–º–µ—Ä: /log_food –ë—É–ª–æ—á–∫–∞ —Å –º–∞–∫–æ–º"),
        BotCommand(command="/log_workout", description="–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ü—Ä–∏–º–µ—Ä: /log_workout –∂–∏–º –ª–µ–∂–∞ 10"),
        BotCommand(command="/check_progress", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
    ]
    await bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


# from utils import load_test_user_data
# user_data = defaultdict(load_test_user_data)

user_profiles = {}
user_data = defaultdict(UserData)
food_info = {}

class ProfileForm(StatesGroup):
    waiting_for_sex = State()
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_age = State()
    waiting_for_city = State()
    waiting_for_activity = State()
    waiting_for_water = State()
    waiting_for_calories = State()
    waiting_for_food_amout = State()


@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π /set_profile, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")


@dp.message(Command('help'))
async def cmd_help(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É.")
    await message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n/set_profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")


@dp.message(Command('profile'))
async def cmd_profile(message: types.Message):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")

    profile = user_profiles.get(user_id)

    if profile:
        sex = profile['sex']
        weight = profile['weight']
        height = profile['height']
        age = profile['age']
        activity = profile['activity']
        city = profile['city']
        calories = profile['calories']
        cpa = profile['cpa']
        water = profile['water']

        profile_message = (
            f"üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"üë§ –ü–æ–ª: {sex}\n"
            f"‚öñÔ∏è –í–µ—Å: {weight} –∫–≥\n"
            f"üìè –†–æ—Å—Ç:  {height} —Å–º\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
            f"üèÉ‚Äç –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity} –º–∏–Ω/–¥–µ–Ω—å\n"
            f"üåç –ì–æ—Ä–æ–¥: {city}\n"
            f"üçè –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {calories} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
            f"üí™üèª –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ö–§–ê: {cpa}\n"
            f"üßä –¶–µ–ª—å –≤–æ–¥—ã: {water} –º–ª/–¥–µ–Ω—å"
        )

        await message.answer(profile_message)
    else:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ.")


@dp.message(Command('set_profile'))
async def cmd_set_profile(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è.")

    sex_choices = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data='–º—É–∂—Å–∫–æ–π')],
            [types.InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data='–∂–µ–Ω—Å–∫–∏–π')],
    ])

    await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª:", reply_markup=sex_choices)
    await state.set_state(ProfileForm.waiting_for_sex)


@dp.callback_query(lambda call: True, ProfileForm.waiting_for_sex)
async def process_sex(call: CallbackQuery, state: FSMContext):
    user_id = call.message.from_user.id
    # sex = message.text.lower()
    sex = call.data

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –ø–æ–ª: {sex}")
    await state.update_data(sex=sex)
    await call.message.answer(f"–í–∞—à –ø–æ–ª: {sex}. –°–∫–æ–ª—å–∫–æ –≤—ã –≤–µ—Å–∏—Ç–µ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?")
    await state.set_state(ProfileForm.waiting_for_weight)


@dp.message(ProfileForm.waiting_for_weight)
async def process_weight(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        weight = int(message.text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –≤–µ—Å: {weight} –∫–≥.")
        await state.update_data(weight=weight)
        await message.answer(f"–í–∞—à –≤–µ—Å: {weight} –∫–≥. –ö–∞–∫–æ–π –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?")
        await state.set_state(ProfileForm.waiting_for_height)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö.")


@dp.message(ProfileForm.waiting_for_height)
async def process_height(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        height = int(message.text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Ä–æ—Å—Ç: {height} —Å–º.")
        await state.update_data(height=height)
        await message.answer(f"–í–∞—à —Ä–æ—Å—Ç: {height} —Å–º. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
        await state.set_state(ProfileForm.waiting_for_age)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö.")


@dp.message(ProfileForm.waiting_for_age)
async def process_age(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        age = int(message.text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç.")
        await state.update_data(age=age)
        await message.answer(f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç. –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?")
        await state.set_state(ProfileForm.waiting_for_city)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")


@dp.message(ProfileForm.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    city = message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –≥–æ—Ä–æ–¥: {city}.")
    await state.update_data(city=city)
    await message.answer(f"–í–∞—à –≥–æ—Ä–æ–¥: {city}. –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å? (–ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–∫–∞–∂–∏—Ç–µ \"0\").")
    await state.set_state(ProfileForm.waiting_for_activity)


@dp.message(ProfileForm.waiting_for_activity)
async def process_activity(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        activity = int(message.text)
        cpa = min(1.2 + activity // 10 * 0.1, 2.4) # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –ö–§–ê
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity} –º–∏–Ω—É—Ç.")
        await state.update_data(activity=activity)
        await state.update_data(cpa=cpa)
        await message.answer(f"–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity} –º–∏–Ω—É—Ç. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –¥–µ–Ω—å –≤ –º–ª (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ \"-\" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞).")
        await state.set_state(ProfileForm.waiting_for_water)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")


@dp.message(ProfileForm.waiting_for_water)
async def process_water(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text

    if user_input.isdigit():
        water = int(user_input)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∫–∞–∑–∞–ª —Ü–µ–ª—å –≤–æ–¥—ã –≤—Ä—É—á–Ω—É—é: {water} –º–ª.")
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —É–∫–∞–∑–∞–ª —Ü–µ–ª—å –≤–æ–¥—ã, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        state_data = await state.get_data()
        weight = int(state_data.get('weight'))
        is_male = (state_data.get('sex').lower() == "–º—É–∂—Å–∫–æ–π")
        activity = int(state_data.get('activity'))

        try:
            temperature = await get_temp(state_data.get('city'))
            logger.info(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {state_data.get('city')} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {temperature} –≥—Ä–∞–¥—É—Å–æ–≤")
            is_heat = (temperature >= 25)
        except:
            logger.info(f"–î–ª—è –≥–æ—Ä–æ–¥–∞ {state_data.get('city')} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")
            is_heat = False

        base_water = weight * 30 + 500 * is_male
        activity_water = (activity // 30) * 500
        weather_water = 500 * is_heat

        water = base_water + activity_water + weather_water

    await state.update_data(water=water)
    await message.answer(f"–í–∞—à–∞ —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ: {water} –º–ª/–¥–µ–Ω—å.")

    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å (–≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ –∏–ª–∏ \"-\" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞).")
    await state.set_state(ProfileForm.waiting_for_calories)


@dp.message(ProfileForm.waiting_for_calories)
async def process_calories(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text
    state_data = await state.get_data()
    weight = int(state_data.get('weight'))
    height = int(state_data.get('height'))
    age = int(state_data.get('age'))
    sex = state_data.get('sex').lower()
    activity = int(state_data.get('activity'))
    cpa = state_data.get('cpa')

    if user_input.isdigit():
        calories = int(user_input)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∫–∞–∑–∞–ª —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π –≤—Ä—É—á–Ω—É—é: {calories}.")
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —É–∫–∞–∑–∞–ª —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        # –ù–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º—É–ª—ã –•–∞—Ä—Ä–∏—Å–∞-–ë–µ–Ω–µ–¥–∏–∫—Ç–∞ (–¥–æ–±–∞–≤–ª–µ–Ω –ö–§–ê)
        if sex == "–º—É–∂—Å–∫–æ–π":
            calories = int((66.5 + 13.75 * weight + 5.003 * height - 6.775 * age) * 1.1 * cpa)
        else:
            calories = int((655.1 + 9.563 * weight + 1.85 * height - 4.676 * age) * cpa)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profiles[user_id] = {
        'sex': sex,
        'weight': weight,
        'height': height,
        'age': age,
        'activity': activity,
        'city': state_data.get('city'),
        'water': state_data.get('water'),
        'calories': calories,
        'cpa': cpa,
    }

    await message.answer(f"–í–∞—à–∞ —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º: {calories} –∫–∫–∞–ª/–¥–µ–Ω—å.")
    await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /profile.")
    await state.clear()


@dp.message(Command('log_water'))
async def cmd_log_water(message: types.Message):
    user_id = message.from_user.id
    try:
        amount = int(message.text.split()[1])
        user_data[user_id].append({"water": amount})
        profile = user_profiles.get(user_id)
        goal = profile.get("water")
        remaining = max(goal - user_data[user_id]["water"], 0)
        if remaining > 0:
            await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –º–ª –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã.")
        else:
            await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –º–ª –≤–æ–¥—ã. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–æ—Ä–º—É")
        return
    except Exception as e:
        logger.exception(f"–ü–æ–ª—É—á–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:\n{e}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö. –ü—Ä–∏–º–µ—Ä: /log_water 120")


@dp.message(Command('log_food'))
async def cmd_log_food(message: types.Message, state: FSMContext):
    try:
        food = message.text.split(maxsplit=1)[1]
        prompt = f"–°–∫–æ–ª—å–∫–æ –∫–∏–ª–æ–∫–∞–ª–æ—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ 100 –≥—Ä–∞–º–º–∞—Ö {food}? –û—Ç–≤–µ—Ç –¥–∞–π —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è."
        for retry in range(3):
            calories_info = await gigachat_call(prompt)
            if type(calories_info) is int:
                break

        if isinstance(calories_info, str):
            logger.exception(f"–ü–æ–ª—É—á–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {food}")
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {food}")
            return

        if food not in food_info:
            food_info[food] = calories_info
        await message.answer(f"{food.capitalize()} ‚Äî {calories_info} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª–∏? (–ó–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º)")
        await state.update_data(calories_info=calories_info, food=food)
        await state.set_state(ProfileForm.waiting_for_food_amout)

    except Exception as e:
        logger.exception(f"–ü–æ–ª—É—á–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:\n{e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä: /log_food —è–±–ª–æ–∫–æ")


@dp.message(ProfileForm.waiting_for_food_amout)
async def process_food_amount(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    state_data = await state.get_data()
    calories_info = state_data.get("calories_info")
    try:
        amount = int(message.text)
        total_calories = (calories_info * amount) / 100
        user_data[user_id].append({"calories_in": total_calories})

        profile = user_profiles.get(user_id)
        goal = profile.get("calories")
        remaining = max(goal - user_data[user_id]["calories_in"], 0)
        if remaining > 0:
            await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {total_calories:.2f} –∫–∫–∞–ª. –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –∫–∫–∞–ª –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã.")
        else:
            await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {total_calories:.2f} –∫–∫–∞–ª. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–æ—Ä–º—É")
        await state.clear()
        return

    except Exception as e:
        logger.exception(f"–ü–æ–ª—É—á–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:\n{e}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º.")


@dp.message(Command('log_workout'))
async def cmd_log_workout(message: types.Message):
    user_id = message.from_user.id
    try:
        parts = re.search(r"log_workout ([\w\s]+) (\d+)", message.text)
        action = parts.group(1).strip()
        duration = int(parts.group(2))

        prompt = f"–°–∫–æ–ª—å–∫–æ –∫–∏–ª–æ–∫–∞–ª–æ—Ä–∏–π —Å–∂–∏–≥–∞–µ—Ç—Å—è –∑–∞ 1 –º–∏–Ω—É—Ç—É {action}? –û—Ç–≤–µ—Ç –¥–∞–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º, –±–µ–∑ –∫–∞–∫–æ–≥–æ –ª–∏–±–æ —Ç–µ–∫—Å—Ç–∞ –∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è."
        for retry in range(3):
            calories_info = await gigachat_call(prompt)
            if type(calories_info) is int:
                break

        if isinstance(calories_info, str):
            logger.exception(f"–ü–æ–ª—É—á–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {action}")
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {action}")
            return

        calories_burned = calories_info * duration
        user_data[user_id].append({"calories_out": calories_burned})
        additional_water = (duration // 30) * 200
        await message.answer(
            f"{action.capitalize()} {duration} –º–∏–Ω—É—Ç ‚Äî {calories_burned} –∫–∫–∞–ª.\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {additional_water} –º–ª –≤–æ–¥—ã."
        )
        return
    except Exception as e:
        logger.exception(f"–ü–æ–ª—É—á–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:\n{e}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö. –ü—Ä–∏–º–µ—Ä: /log_workout –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è 15")


@dp.message(Command('check_progress'))
async def cmd_check_progress(message: types.Message):
    user_id = message.from_user.id
    profile = user_profiles.get(user_id, {})
    goal_water = profile.get("water")
    goal_calories = profile.get("calories")
    water_consumed = user_data[user_id]["water"]
    calories_in = user_data[user_id]["calories_in"]
    calories_out = user_data[user_id]["calories_out"]
    progress_message = (
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
        f"–í–æ–¥–∞:\n"
        f"- –í—ã–ø–∏—Ç–æ: {water_consumed}/{goal_water} –º–ª.\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {max(goal_water - water_consumed, 0)} –º–ª.\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏:\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {calories_in}/{goal_calories} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {calories_out} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {abs(calories_in - calories_out)} –∫–∫–∞–ª.\n"
    )

    img_files = user_data[user_id].draw_stat(goal_calories, goal_water)
    await message.answer(progress_message)
    for f in img_files:
        await bot.send_photo(message.chat.id, photo=types.FSInputFile(f))
        os.remove(f)

    return


@dp.message()
async def process_invalid_message(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
    return


async def main():
    await set_commands()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
